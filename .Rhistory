#kmeansObj2<-kmeans(GPS_Seattle[GPS_Seattle$cluster==8,1:2],centers=4,nstart=1000)
#GPS_Seattle$cluster2<-rep(NA,length(GPS_Seattle$x))
#GPS_Seattle[GPS_Seattle$cluster1==8,]$cluster2<-kmeansObj2$cluster
Seattle<-data2[data2$city=="Seattle",]
Seattle$store<-rep(NA,length(Seattle$city))
Seattle<-Seattle[,c(1,2,3,17,4,5,6,7,8,9,10,11,12,13,14,15,16)]
row.names(Seattle)<-1:length(Seattle$city)
## New York city, 13 stores
set.seed(12345)
GPS_NYC<-GPS[GPS$city=="New York City",1:2]
kmeansObj<-kmeans(GPS_NYC,centers=13,nstart = 10000)
#plot(GPS[GPS$city=="New York City",1],GPS[GPS$city=="New York City",2])
#points(kmeansObj$centers,pch=3,cex=3,lwd=1)
#hist(kmeansObj$cluster,breaks = 13)
#table(kmeansObj$cluster)
#plot(kmeansObj$centers,pch=3,cex=2)
#text(1:13,x=kmeansObj$centers[,1]+0.01,y=kmeansObj$centers[,2]+0.01,cex=0.7,col="red")
NYC<-data2[data2$city=="New York City",]
NYC$store<-kmeansObj$cluster
NYC<-NYC[,c(1,2,3,17,4,5,6,7,8,9,10,11,12,13,14,15,16)]
NYC<-arrange(NYC,store)
row.names(NYC)<-1:length(NYC$city)
dup<-c(10,32,3,27,4,28,8,34,9,33,12,36,14,38,64,16,40)
NYC<-NYC[-dup,]
row.names(NYC)<-1:length(NYC$city)
## Los Angeles, 24 stores
##set.seed(12345)
##GPS_LA<-GPS[GPS$city=="Los Angeles",1:2]
##kmeansObj<-kmea<<<<<<<<<ns(GPS_LA,centers=24,nstart = 10000)
#plot(GPS[GPS$city=="Los Angeles",1],GPS[GPS$city=="Los Angeles",2])
#points(kmeansObj$centers,pch=3,cex=3,lwd=1)
#hist(kmeansObj$cluster,breaks = 13)
#table(kmeansObj$cluster)
#plot(kmeansObj$centers,pch=3,cex=2)
#text(1:24,x=kmeansObj$centers[,1]+0.005,y=kmeansObj$centers[,2]+0.01,cex=0.7,col="red")
LA<-data2[data2$city=="Los Angeles",]
LA$store<-rep(NA,length(LA$city))
LA<-LA[,c(1,2,3,17,4,5,6,7,8,9,10,11,12,13,14,15,16)]
row.names(LA)<-1:length(LA$city)
## Chicago, 24 stores
#set.seed(12345)
#GPS_Chicago<-GPS[GPS$city=="Chicago",1:2]
#kmeansObj<-kmeans(GPS_Chicago,centers=24,nstart = 10000)
#plot(GPS[GPS$city=="Chicago",1],GPS[GPS$city=="Chicago",2])
#points(kmeansObj$centers,pch=3,cex=3,lwd=1)
#hist(kmeansObj$cluster,breaks = 13)
#table(kmeansObj$cluster)
#plot(kmeansObj$centers,pch=3,cex=2)
#text(1:24,x=kmeansObj$centers[,1]+0.005,y=kmeansObj$centers[,2]+0.01,cex=0.7,col="red")
Chicago<-data2[data2$city=="Chicago",]
Chicago$store<-rep(NA,length(Chicago$city))
Chicago<-Chicago[,c(1,2,3,17,4,5,6,7,8,9,10,11,12,13,14,15,16)]
row.names(Chicago)<-1:length(Chicago$city)
## San Francisco, 3 stores
SF<-data2[data2$city=="San Francisco",]
SF$store<-rep(NA,length(SF$city))
SF<-SF[,c(1,2,3,17,4,5,6,7,8,9,10,11,12,13,14,15,16)]
row.names(SF)<-1:length(SF$city)
#################################
#################################
#####   STARTING ANALYSIS  ######
################################
################################
MGP<-data.frame("SF"=rep(NA,3),"NYC"=rep(NA,3),"Chicago"=rep(NA,3),"LA"=rep(NA,3),"Seattle"=rep(NA,3),"Boston"=rep(NA,3))
MGP[1,1]<-sum((SF[SF$Task.Name=="Photo Sandwich Container",12]=="Yes")*1)/length(SF[SF$Task.Name=="Photo Sandwich Container",12])*100
MGP[1,4]<-sum((LA[LA$Task.Name=="Photo Sandwich Container",12]=="Yes")*1)/length(LA[LA$Task.Name=="Photo Sandwich Container",12])*100
MGP[1,3]<-sum((Chicago[Chicago$Task.Name=="Photo Sandwich Container",12]=="Yes")*1)/length(Chicago[Chicago$Task.Name=="Photo Sandwich Container",12])*100
MGP[1,2]<-sum((NYC[NYC$Task.Name=="Photo Sandwich Container",12]=="Yes")*1)/length(NYC[NYC$Task.Name=="Photo Sandwich Container",12])*100
MGP[1,5]<-sum((Seattle[Seattle$Task.Name=="Photo Sandwich Container",12]=="Yes")*1)/length(Seattle[Seattle$Task.Name=="Photo Sandwich Container",12])*100
MGP[1,6]<-sum((Boston[Boston$Task.Name=="Photo Sandwich Container",12]=="Yes")*1)/length(Boston[Boston$Task.Name=="Photo Sandwich Container",12])*100
MGP[2,1]<-sum((SF[SF$Task.Name=="Photo Fries Container",12]=="Yes")*1)/length(SF[SF$Task.Name=="Photo Fries Container",12])*100
MGP[2,4]<-sum((LA[LA$Task.Name=="Photo Fries Container",12]=="Yes")*1)/length(LA[LA$Task.Name=="Photo Fries Container",12])*100
MGP[2,3]<-sum((Chicago[Chicago$Task.Name=="Photo Fries Container",12]=="Yes")*1)/length(Chicago[Chicago$Task.Name=="Photo Fries Container",12])*100
MGP[2,2]<-sum((NYC[NYC$Task.Name=="Photo Fries Container",12]=="Yes")*1)/length(NYC[NYC$Task.Name=="Photo Fries Container",12])*100
MGP[2,5]<-sum((Seattle[Seattle$Task.Name=="Photo Fries Container",12]=="Yes")*1)/length(Seattle[Seattle$Task.Name=="Photo Fries Container",12])*100
MGP[2,6]<-sum((Boston[Boston$Task.Name=="Photo Fries Container",12]=="Yes")*1)/length(Boston[Boston$Task.Name=="Photo Fries Container",12])*100
MGP[3,1]<-sum((SF[SF$Task.Name=="Photo Soft Drink Cup",12]=="Yes")*1)/length(SF[SF$Task.Name=="Photo Soft Drink Cup",12])*100
MGP[3,4]<-sum((LA[LA$Task.Name=="Photo Soft Drink Cup",12]=="Yes")*1)/length(LA[LA$Task.Name=="Photo Soft Drink Cup",12])*100
MGP[3,3]<-sum((Chicago[Chicago$Task.Name=="Photo Soft Drink Cup",12]=="Yes")*1)/length(Chicago[Chicago$Task.Name=="Photo Soft Drink Cup",12])*100
MGP[3,2]<-sum((NYC[NYC$Task.Name=="Photo Soft Drink Cup",12]=="Yes")*1)/length(NYC[NYC$Task.Name=="Photo Soft Drink Cup",12])*100
MGP[3,5]<-sum((Seattle[Seattle$Task.Name=="Photo Soft Drink Cup",12]=="Yes")*1)/length(Seattle[Seattle$Task.Name=="Photo Soft Drink Cup",12])*100
MGP[3,6]<-sum((Boston[Boston$Task.Name=="Photo Soft Drink Cup",12]=="Yes")*1)/length(Boston[Boston$Task.Name=="Photo Soft Drink Cup",12])*100
row.names(MGP)<-c("add_Sandwich","add_Fries","add_Drink")
MGP<-t(MGP)
MGP<-as.data.frame(MGP[c(1,4,2,6,5,3),])
MGP$city<-rownames(MGP)
MGP<-MGP[,c(4,1,2,3)]
rownames(MGP)<-1:6
M<-data.frame(city=rep(MGP$city,3),proportion=c(MGP$add_Sandwich,MGP$add_Fries,MGP$add_Drink),container=rep(c("Sandwich","Fries","Drink"),each=6))
M$label <- paste0(sprintf("%.0f", M$proportion), "%")
##############################
GBD<-data.frame(city=rep(unique(M$city),each=3), proportion=rep(NA,18), Monopoly_Dispenser=rep(c("FC+Monop Dispenser","Monop Dispenser","No Monop Dispenser"),6))
GBD_average<-data.frame(proportion=rep(NA,3), Monopoly_Dispenser=c("FC+Monop Dispenser","Monop Dispenser","No Monop Dispenser"))
L1<-length(SF[SF$Task.Name=="Gameboard Dispenser",12])
L2<-length(LA[LA$Task.Name=="Gameboard Dispenser",12])
L3<-length(NYC[NYC$Task.Name=="Gameboard Dispenser",12])
L4<-length(Boston[Boston$Task.Name=="Gameboard Dispenser",12])
L5<-length(Seattle[Seattle$Task.Name=="Gameboard Dispenser",12])
L6<-length(Chicago[Chicago$Task.Name=="Gameboard Dispenser",12])
L<-L1+L2+L3+L4+L5+L6
for (i in 1:3) {
if (i==1) {
GBD[i,2]<-sum((SF[SF$Task.Name=="Gameboard Dispenser",12]=="Yes" & SF[SF$Task.Name=="Gameboard Dispenser",15]=="Yes")*1)/length(SF[SF$Task.Name=="Gameboard Dispenser",12])*100
GBD[3+i,2]<-sum((LA[LA$Task.Name=="Gameboard Dispenser",12]=="Yes" & LA[LA$Task.Name=="Gameboard Dispenser",15]=="Yes")*1)/length(LA[LA$Task.Name=="Gameboard Dispenser",12])*100
GBD[6+i,2]<-sum((NYC[NYC$Task.Name=="Gameboard Dispenser",12]=="Yes" & NYC[NYC$Task.Name=="Gameboard Dispenser",15]=="Yes")*1)/length(NYC[NYC$Task.Name=="Gameboard Dispenser",12])*100
GBD[9+i,2]<-sum((Boston[Boston$Task.Name=="Gameboard Dispenser",12]=="Yes" & Boston[Boston$Task.Name=="Gameboard Dispenser",15]=="Yes")*1)/length(Boston[Boston$Task.Name=="Gameboard Dispenser",12])*100
GBD[12+i,2]<-sum((Seattle[Seattle$Task.Name=="Gameboard Dispenser",12]=="Yes" & Seattle[Seattle$Task.Name=="Gameboard Dispenser",15]=="Yes")*1)/length(Seattle[Seattle$Task.Name=="Gameboard Dispenser",12])*100
GBD[15+i,2]<-sum((Chicago[Chicago$Task.Name=="Gameboard Dispenser",12]=="Yes" & Chicago[Chicago$Task.Name=="Gameboard Dispenser",15]=="Yes")*1)/length(Chicago[Chicago$Task.Name=="Gameboard Dispenser",12])*100
GBD_average[i,1]<-(( GBD[i,2]*L1+GBD[3+i,2]*L2+GBD[6+i,2]*L3+GBD[9+i,2]*L4+GBD[12+i,2]*L5+ GBD[15+i,2]*L6 ) / L)
}
if (i==2) {
GBD[i,2]<-sum((SF[SF$Task.Name=="Gameboard Dispenser",12]=="No" & SF[SF$Task.Name=="Gameboard Dispenser",15]=="Yes")*1)/length(SF[SF$Task.Name=="Gameboard Dispenser",12])*100
GBD[3+i,2]<-sum((LA[LA$Task.Name=="Gameboard Dispenser",12]=="No" & LA[LA$Task.Name=="Gameboard Dispenser",15]=="Yes")*1)/length(LA[LA$Task.Name=="Gameboard Dispenser",12])*100
GBD[6+i,2]<-sum((NYC[NYC$Task.Name=="Gameboard Dispenser",12]=="No" & NYC[NYC$Task.Name=="Gameboard Dispenser",15]=="Yes")*1)/length(NYC[NYC$Task.Name=="Gameboard Dispenser",12])*100
GBD[9+i,2]<-sum((Boston[Boston$Task.Name=="Gameboard Dispenser",12]=="No" & Boston[Boston$Task.Name=="Gameboard Dispenser",15]=="Yes")*1)/length(Boston[Boston$Task.Name=="Gameboard Dispenser",12])*100
GBD[12+i,2]<-sum((Seattle[Seattle$Task.Name=="Gameboard Dispenser",12]=="No" & Seattle[Seattle$Task.Name=="Gameboard Dispenser",15]=="Yes")*1)/length(Seattle[Seattle$Task.Name=="Gameboard Dispenser",12])*100
GBD[15+i,2]<-sum((Chicago[Chicago$Task.Name=="Gameboard Dispenser",12]=="No" & Chicago[Chicago$Task.Name=="Gameboard Dispenser",15]=="Yes")*1)/length(Chicago[Chicago$Task.Name=="Gameboard Dispenser",12])*100
GBD_average[i,1]<-(( GBD[i,2]*L1+GBD[3+i,2]*L2+GBD[6+i,2]*L3+GBD[9+i,2]*L4+GBD[12+i,2]*L5+ GBD[15+i,2]*L6 ) / L)
}
if (i==3) {
GBD[i,2]<-sum((SF[SF$Task.Name=="Gameboard Dispenser",15]=="No" | SF[SF$Task.Name=="Gameboard Dispenser",15]=="N/A")*1)/length(SF[SF$Task.Name=="Gameboard Dispenser",12])*100
GBD[3+i,2]<-sum((LA[LA$Task.Name=="Gameboard Dispenser",15]=="No" | LA[LA$Task.Name=="Gameboard Dispenser",15]=="N/A")*1)/length(LA[LA$Task.Name=="Gameboard Dispenser",12])*100
GBD[6+i,2]<-sum((NYC[NYC$Task.Name=="Gameboard Dispenser",15]=="No" | NYC[NYC$Task.Name=="Gameboard Dispenser",15]=="N/A")*1)/length(NYC[NYC$Task.Name=="Gameboard Dispenser",12])*100
GBD[9+i,2]<-sum((Boston[Boston$Task.Name=="Gameboard Dispenser",15]=="No" | Boston[Boston$Task.Name=="Gameboard Dispenser",15]=="N/A")*1)/length(Boston[Boston$Task.Name=="Gameboard Dispenser",12])*100
GBD[12+i,2]<-sum((Seattle[Seattle$Task.Name=="Gameboard Dispenser",15]=="No" | Seattle[Seattle$Task.Name=="Gameboard Dispenser",15]=="N/A")*1)/length(Seattle[Seattle$Task.Name=="Gameboard Dispenser",12])*100
GBD[15+i,2]<-sum((Chicago[Chicago$Task.Name=="Gameboard Dispenser",15]=="No" | Chicago[Chicago$Task.Name=="Gameboard Dispenser",15]=="N/A")*1)/length(Chicago[Chicago$Task.Name=="Gameboard Dispenser",12])*100
GBD_average[i,1]<-(( GBD[i,2]*L1+GBD[3+i,2]*L2+GBD[6+i,2]*L3+GBD[9+i,2]*L4+GBD[12+i,2]*L5+ GBD[15+i,2]*L6 ) / L)
}
}
GBD$label <- paste0(sprintf("%.0f", GBD$proportion), "%")
GBD_average$label <- paste0(sprintf("%.0f", GBD_average$proportion), "%")
#############
Tray_liner<-data.frame(city=unique(M$city),proportion=rep(NA,6))
Tray_liner[1,2]<-sum((SF[SF$Task.Name=="Get Extra Value Meal",15]=="Yes")*1)/length(SF[SF$Task.Name=="Get Extra Value Meal",15])*100
Tray_liner[2,2]<-sum((LA[LA$Task.Name=="Get Extra Value Meal",15]=="Yes")*1)/length(LA[LA$Task.Name=="Get Extra Value Meal",15])*100
Tray_liner[6,2]<-sum((Chicago[Chicago$Task.Name=="Get Extra Value Meal",15]=="Yes")*1)/length(Chicago[Chicago$Task.Name=="Get Extra Value Meal",15])*100
Tray_liner[3,2]<-sum((NYC[NYC$Task.Name=="Get Extra Value Meal",15]=="Yes")*1)/length(NYC[NYC$Task.Name=="Get Extra Value Meal",15])*100
Tray_liner[5,2]<-sum((Seattle[Seattle$Task.Name=="Get Extra Value Meal",15]=="Yes")*1)/length(Seattle[Seattle$Task.Name=="Get Extra Value Meal",15])*100
Tray_liner[4,2]<-sum((Boston[Boston$Task.Name=="Get Extra Value Meal",15]=="Yes")*1)/length(Boston[Boston$Task.Name=="Get Extra Value Meal",15])*100
T<-Tray_liner
T$label <- paste0(sprintf("%.0f", T$proportion), "%")
### DEFINING COLOR PALETTE FOR ALL PLOTS
pal<-c(rgb(204,33,39,max=255), rgb(0,0,0,max=255),rgb(163,163,163,max=255),rgb(53,124,162,max=255),rgb(209,126,20,max=255),rgb(107,32,133,max=255))
### PLOT 1 ###
##removing SF
M<-M[c(2:6,8:12,14:18),]
jpeg(file = "~/Bnocular/plot1.jpeg",width=900,height=900,quality=100)
g<-ggplot(data=M,aes(x=city,y=proportion,fill=container))+geom_bar(stat="identity",width=0.4,position=position_dodge(width=0.5),alpha=0.8,col="black") +
scale_fill_manual(values = pal[c(1,2,4)])+labs(y="Percent of Stores showing MP pieces on container") + coord_flip() +
geom_text(aes(x = city, y = proportion, label=label), color = "black",
size = 4,
fontface= 0,
hjust=-0.3,
vjust =ifelse((M$container=="Drink"),4,ifelse((M$container=="Fries"),0.5,-3))) +
theme(plot.title = element_blank(),
axis.title = element_text(size = rel(1.3)),
legend.position = c(0.5,0.99),
legend.key.width = unit(2, "line"),
legend.key.height = unit(2, "line"),
legend.text=element_text(size=14,face="bold"),
legend.title=element_text(size=12),
axis.text = element_text(size = rel(1))) +
theme(strip.background = element_rect(fill = "black"),
strip.text.y = element_text(colour = "white", face = "bold", angle=0),
panel.grid.major = element_line(colour = "grey90"),
panel.grid.minor = element_line(colour = "grey95"),
panel.background = element_rect(fill = "white"),
legend.key = element_rect(fill = "transparent"),
legend.direction="horizontal",
axis.title.x = element_text(face = "bold",vjust=-0.6),
axis.title.y = element_text(face = "bold"),
plot.title = element_text(face = "bold")) +
geom_hline(yintercept=100,linetype="dotted")
g
dev.off()
### PLOT 2 ###
## Removing SF
GBD<-GBD[-(1:3),]
jpeg(file = "~/Bnocular/plot2.jpeg",width=900,height=900,quality=100)
g1<-ggplot(data=GBD[GBD$city=="LA",],aes(x=city,y=proportion,fill=Monopoly_Dispenser))+geom_bar(stat="identity",width=1,col="black") +
scale_fill_manual(values = pal[c(4,3,5)],name="",labels=c("Front counter gameboard dispenser + Monopoly gameboards", "Monopoly gameboards", "No Monopoly gameboard")) +
labs(y="Los Angeles", x="") + coord_polar(theta = "y") +
geom_text(aes(y = proportion/2 + c(0, cumsum(proportion)[-length(proportion)]), label = label), size=5) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.key.width = unit(1.8, "line"),
legend.key.height = unit(1.8, "line"),
legend.text=element_text(size=12,face="bold"),
panel.background = element_rect(fill = "white"),
legend.key = element_rect(fill = "white"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"),
axis.text = element_blank(),
plot.title = element_text(face = "bold"))
g3<-ggplot(data=GBD[GBD$city=="Chicago",],aes(x=city,y=proportion,fill=Monopoly_Dispenser))+geom_bar(stat="identity",width=1,col="black") +
scale_fill_manual(values = pal[c(4,3,5)])+labs(y="Chicago", x="") + coord_polar(theta = "y") +
geom_text(aes(y = proportion/2 + c(0, cumsum(proportion)[-length(proportion)]), label = label), size=5) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"),
legend.key = element_rect(fill = "white"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"),
axis.text = element_blank(),
plot.title = element_text(face = "bold"))
g4<-ggplot(data=GBD[GBD$city=="Seattle",],aes(x=city,y=proportion,fill=Monopoly_Dispenser))+geom_bar(stat="identity",width=1,col="black") +
scale_fill_manual(values = pal[c(4,3,5)])+labs(y="Seattle", x="") + coord_polar(theta = "y") +
geom_text(aes(y = proportion/2 + c(0, cumsum(proportion)[-length(proportion)]), label = label), size=5) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"),
legend.key = element_rect(fill = "white"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"),
axis.text = element_blank(),
plot.title = element_text(face = "bold"))
g5<-ggplot(data=GBD[GBD$city=="NYC",],aes(x=city,y=proportion,fill=Monopoly_Dispenser))+geom_bar(stat="identity",width=1,col="black") +
scale_fill_manual(values = pal[c(4,3,5)])+labs(y="New York City", x="") + coord_polar(theta = "y") +
geom_text(aes(y = proportion/2 + c(0, cumsum(proportion)[-length(proportion)]), label = label), size=5) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"),
legend.key = element_rect(fill = "white"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"),
axis.text = element_blank(),
plot.title = element_text(face = "bold"))
g6<-ggplot(data=GBD[GBD$city=="Boston",],aes(x=city,y=proportion,fill=Monopoly_Dispenser))+geom_bar(stat="identity",width=1,col="black") +
scale_fill_manual(values =pal[c(4,3,5)])+labs(y="Boston", x="") + coord_polar(theta = "y") +
geom_text(aes(y = proportion/2 + c(0, cumsum(proportion)[-length(proportion)]), label = label), size=5) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"),
legend.key = element_rect(fill = "white"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"),
axis.text = element_blank(),
plot.title = element_text(face = "bold"))
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
mylegend<-g_legend(g1)
grid.arrange(arrangeGrob(g1 + theme(legend.position="none"), g3 + theme(legend.position="none"), g4 + theme(legend.position="none"), g5 + theme(legend.position="none"), g6 + theme(legend.position="none"),
ncol=3),
mylegend, nrow=2,heights=c(200, 70),main=textGrob("Monopoly gameboards",gp=gpar(fontsize=20,font=3)))
dev.off()
### PLOT 3 ###
jpeg(file = "~/Bnocular/plot3.jpeg",width=900,height=900,quality=100)
g<-ggplot(data=GBD_average,aes(x="",y=proportion,fill=Monopoly_Dispenser))+geom_bar(stat="identity",width=1,col="black") +
scale_fill_manual(values =pal[c(4,3,5)], name="",
labels=c("Front counter gameboard dispenser + Monopoly gameboards", "Monopoly gameboards", "No Monopoly gameboard")) +
labs(y="6-City average", x="",title="Monopoly gameboards accross the US") + coord_polar(theta = "y") +
geom_text(aes(y = proportion/2 + c(0, cumsum(proportion)[-length(proportion)]), label = label), size=5) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.key.width = unit(1.8, "line"),
legend.key.height = unit(1.8, "line"),
legend.text=element_text(size=12,face="bold"),
panel.background = element_rect(fill = "white"),
legend.key = element_rect(fill = "white"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"),
axis.text = element_blank(),
plot.title = element_text(face = "bold"))
g
dev.off()
### PLOT 4 ###
jpeg(file = "~/Bnocular/plot4.jpeg",width=900,height=900,quality=100)
### removing SF
DEV.OFF()
dev.off()
T
T<-T[-(1), ]
T
g<-ggplot(data=T,aes(x=city,y=proportion))+geom_bar(stat="identity",width=0.4,alpha=0.8,fill=pal[1],col="black") +
geom_text(aes(x = city, y = proportion, label=label), color = "black",
size = 4,
fontface= 0,
hjust=0.5,
vjust =-0.5) + coord_flip() +
labs(y="Percent of Stores giving Monopoly tray-liners with in-store purchase",title="Monopoly game tray-liners") +
theme(plot.title = element_text(size = rel(1)),
axis.title = element_text(size = rel(1.3)),
legend.position = c(0.03,0.85),
legend.key.width = unit(1.8, "line"),
legend.key.height = unit(1.8, "line"),
legend.text=element_text(size=12,face="bold"),
axis.text = element_text(size = rel(1))) +
theme(strip.background = element_rect(fill = "black"),
strip.text.y = element_text(colour = "white", face = "bold", angle=0),
panel.grid.major = element_line(colour = "grey90"),
panel.grid.minor = element_line(colour = "grey95"),
panel.background = element_rect(fill = "white"),
legend.key = element_rect(fill = "white"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"),
plot.title = element_text(size=15,face = "bold"))
g
class(g)
jpeg(file = "~/Bnocular/plot4.jpeg",width=900,height=900,quality=100)
### removing SF
T<-T[-(1), ]
g<-ggplot(data=T,aes(x=city,y=proportion))+geom_bar(stat="identity",width=0.4,alpha=0.8,fill=pal[1],col="black") +
geom_text(aes(x = city, y = proportion, label=label), color = "black",
size = 4,
fontface= 0,
hjust=0.5,
vjust =-0.5) + coord_flip() +
labs(y="Percent of Stores giving Monopoly tray-liners with in-store purchase",title="Monopoly game tray-liners") +
theme(plot.title = element_text(size = rel(1)),
axis.title = element_text(size = rel(1.3)),
legend.position = c(0.03,0.85),
legend.key.width = unit(1.8, "line"),
legend.key.height = unit(1.8, "line"),
legend.text=element_text(size=12,face="bold"),
axis.text = element_text(size = rel(1))) +
theme(strip.background = element_rect(fill = "black"),
strip.text.y = element_text(colour = "white", face = "bold", angle=0),
panel.grid.major = element_line(colour = "grey90"),
panel.grid.minor = element_line(colour = "grey95"),
panel.background = element_rect(fill = "white"),
legend.key = element_rect(fill = "white"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"),
plot.title = element_text(size=15,face = "bold"))
g
dev.off()
g<-ggplot(data=T,aes(x=city,y=proportion))+geom_bar(stat="identity",width=0.2,alpha=0.8,fill=pal[1],col="black") +
geom_text(aes(x = city, y = proportion, label=label), color = "black",
size = 4,
fontface= 0,
hjust=0.5,
vjust =-0.5) + coord_flip() +
labs(y="Percent of Stores giving Monopoly tray-liners with in-store purchase",title="Monopoly game tray-liners") +
theme(plot.title = element_text(size = rel(1)),
axis.title = element_text(size = rel(1.3)),
legend.position = c(0.03,0.85),
legend.key.width = unit(1.8, "line"),
legend.key.height = unit(1.8, "line"),
legend.text=element_text(size=12,face="bold"),
axis.text = element_text(size = rel(1))) +
theme(strip.background = element_rect(fill = "black"),
strip.text.y = element_text(colour = "white", face = "bold", angle=0),
panel.grid.major = element_line(colour = "grey90"),
panel.grid.minor = element_line(colour = "grey95"),
panel.background = element_rect(fill = "white"),
legend.key = element_rect(fill = "white"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"),
plot.title = element_text(size=15,face = "bold"))
g
x<-1:5
y<-1:5
lines(x,y)
plot(x,y,type=l)
plot(x,y,type="l")
library(plyr)
library(ggplot2)
library(gridExtra)
library(plotrix)
data<-read.csv("~/Bnocular/programs/data_cleaning/raw_data/under_armour.csv")
## merging duplicate locations:
data[data$Location.Address=="610 WEST EL CAMINO ALTO DRIVE SPRINGFIELD 65810",6]<-"610 WEST EL CAMINO ALTO DRIVE SPRINGFIELD MO 65810"
## Determining brand score for training
Nike_score_training<-(sum(grepl("Nike",data[data$Task.Name=="Brand Awareness",17])*1)/99)*100
UnderArmour_score_training<-(sum(grepl("Under Armour®",data[data$Task.Name=="Brand Awareness",17])*1)/99)*100
Adidas_score_training<-(sum(grepl("Adidas",data[data$Task.Name=="Brand Awareness",17])*1)/99)*100
Reebok_score_training<-(sum(grepl("Reebok",data[data$Task.Name=="Brand Awareness",17])*1)/99)*100
Other_score_training<-(sum(grepl("Other",data[data$Task.Name=="Brand Awareness",17])*1)/99)*100
score_training<-c(Nike_score_training,UnderArmour_score_training,Adidas_score_training,Reebok_score_training,Other_score_training)
## Determining brand score for quality/technology
Nike_score_quality<-(sum(grepl("Nike",data[data$Task.Name=="Brand Awareness",20])*1)/99)*100
UnderArmour_score_quality<-(sum(grepl("Under Armour®",data[data$Task.Name=="Brand Awareness",20])*1)/99)*100
Adidas_score_quality<-(sum(grepl("Adidas",data[data$Task.Name=="Brand Awareness",20])*1)/99)*100
Reebok_score_quality<-(sum(grepl("Reebok",data[data$Task.Name=="Brand Awareness",20])*1)/99)*100
Other_score_quality<-(sum(grepl("Other",data[data$Task.Name=="Brand Awareness",20])*1)/99)*100
score_quality<-c(Nike_score_quality,UnderArmour_score_quality,Adidas_score_quality,Reebok_score_quality,Other_score_quality)
## Determining brand score for general Footwear
Nike_score_Footwear<-(sum(grepl("Nike",data[data$Task.Name=="General Footwear",17])*1)/99)*100
UnderArmour_score_Footwear<-(sum(grepl("Under Armour®",data[data$Task.Name=="General Footwear",17])*1)/99)*100
Adidas_score_Footwear<-(sum(grepl("Adidas",data[data$Task.Name=="General Footwear",17])*1)/99)*100
Reebok_score_Footwear<-(sum(grepl("Reebok",data[data$Task.Name=="General Footwear",17])*1)/99)*100
Other_score_Footwear<-(sum(grepl("Asics|Brooks|Mizuno|Saucony|New Balance|Other",data[data$Task.Name=="General Footwear",17])*1)/99)*100
score_Footwear<-c(Nike_score_Footwear,UnderArmour_score_Footwear,Adidas_score_Footwear,Reebok_score_Footwear,Other_score_Footwear)
brand_score<-data.frame("brand_training"=score_training, "brand_quality"=score_quality, "brand_Footwear"=score_Footwear, "brand"=c("Nike","Under Armour","Adidas","Reebok","Other"))
## transforming brand_score so as to have a matrix with maximum value =100
BS<-data.matrix(brand_score[,1:3])
BS<-(BS/max(BS))*100
## Assessing staff members' ability to list characteristics of AU specific products
##Armour VENT
temp<-as.factor(as.character(data[data$Task.Name=="ArmourVent™",17]))
bad<-(temp=="Staff member was not educated on ArmourVent™")
nb_bad<-sum(bad*1)
zed<-gregexpr(",",temp)
countAV<-sapply(zed,function(elt) ifelse (elt[1]==-1,0,length(elt)))
countAV<-sum(countAV)+length(countAV)-nb_bad
count_propAV<-100*count/(length(temp)*5)
##HEAT GEAR
temp<-as.factor(as.character(data[data$Task.Name=="HeatGear®",17]))
bad<-(temp=="Staff member was not educated on HeatGear®")
nb_bad<-sum(bad*1)
zed<-gregexpr(",",temp)
countHG<-sapply(zed,function(elt) ifelse (elt[1]==-1,0,length(elt)))
minus<-length(grep("Charged",temp))
countHG<-sum(countHG)+length(countHG)-nb_bad-minus
count_propHG<-100*count/(length(temp)*7)
##SpeedForm™ Footwear
temp<-as.factor(as.character(data[data$Task.Name=="SpeedForm™ Footwear",17]))
bad<-(temp=="Staff member was not educated on SpeedForm™")
nb_bad<-sum(bad*1)
zed<-gregexpr(",",temp)
countSF<-sapply(zed,function(elt) ifelse (elt[1]==-1,0,length(elt)))
countSF<-sum(countSF)+length(countSF)-nb_bad
count_propSF<-100*countSF/(length(temp)*5)
##UA shop
temp<-as.factor(as.character(data[data$Task.Name=="Under Armour® Shop",17]))
NO<-100*sum(grepl("Neat and Organized",temp)*1)/99
ME<-100*sum(grepl("Messy",temp)*1)/99
CR<-100*sum(grepl("Crowded",temp)*1)/99
NS<-100*sum(grepl("Nearby staff who are available to answer questions",temp)*1)/99
UAshop<-data.frame("occur"=c(ME,CR,NO,NS),"label"=c("Messy","Crowded","Neat and Organized","Nearby staff who are available \nto answer questions"))
UAshop$labels<-paste0(sprintf("%.0f", UAshop$occur), "%")
pal<-c(rgb(204,33,39,max=255), rgb(0,0,0,max=255),rgb(163,163,163,max=255),rgb(53,124,162,max=255),rgb(209,126,20,max=255),rgb(107,32,133,max=255))
label<-c("Overall training use \nreputation", "Overall quality and technology \nreputation", "Footwear reputation")
legend<-c("Nike","Under Armour","Adidas","Reebok","Other")
col<-pal[c(1,2,5,4,3)]
par(cex.axis=1.5,cex.main=2.1)
radial.plot(BS,labels=label,rp.type="p",radial.pos=c(0,2*pi/3,4*pi/3),
line.col=col,
label.pos=c(0,2*pi/3,4*pi/3),
start=pi/2,lwd=5,main="Brand Reputation Scores \nAmong Retail Sales Associates Across 100 Stores\n \n",
mar=c(0,6,6,6),radlab=F)
legendg(x=-130,y=100,legend=legend,bty="n",col=as.list(col),pch=rep(19,5),cex=1.7,pt.cex=1.7)
g<-ggplot(UAshop,aes(x=label,y=occur))+geom_bar(stat="identity",fill=pal[4],aplha=0.8,col="black",width=0.3)+labs(x="",y="% of stores",main="Under Armour Shops") +
geom_text(aes(x = label, y = occur, label=labels), color = "black",
size = 4,
fontface= 0,
hjust=-0.2,
vjust =0.5) +
coord_flip() +
theme(strip.background = element_rect(fill = "black"),
panel.grid.major = element_line(colour = "grey90"),
panel.grid.minor = element_line(colour = "grey95"),
panel.background = element_rect(fill = "transparent"),
axis.title.x = element_text(size=14,vjust=-0.6),
axis.text.y=element_text(colour="black",size=14),
axis.title.y = element_text(face = "bold"),
plot.title = element_text(face = "bold")) +
geom_hline(yintercept=100,linetype="dotted")
g
names(data)
unique(data$Location.Address)
unique(data$Location.Name)
100 - (0.71563 * 0.058610)*100
printcp(tree1)
library(rpart.plot)
printcp(tree1)
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(ggplot2)
### submission function
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
#### Assignement
setwd("~/R/R directory/machine learning assignement//")
training<-read.csv("pml-training.csv",header = T)
T<-training[,1:7]
train<-training[,-(1:7)]
##Removing variables with too many NA
Matrix_Na<-is.na(train)
Vect_Na<-(apply(Matrix_Na,2,sum))/length(training$X)
rm(Matrix_Na)
bad_var<-(Vect_Na>0.9)
bad_var<-grep("TRUE",bad_var)
train<-train[,-bad_var]
## Analysing 2 factors variables to see if they are relevant
facttwo<-c(7,10,13,75,72,69,53,50,47)
test<-train[,c(facttwo,86)]
for (i in 1:length(facttwo)){
test[,i]<-as.numeric(test[,i])
}
cor(test[,-(length(facttwo)+1)])
train<-train[,-c(7,10,72,69,50,47)]
for (i in 1:79){
train[,i]<-as.numeric(train[,i])
}
## tree fit
set.seed(12345)
tree1<-rpart(classe~.,data=train,control = rpart.control(cp = 0.0000001))
#jpeg(file = "~/R/R directory/tree.jpeg",width=900,height=900,quality=100)
#fancyRpartPlot(tree1,cex=0.5)
##dev.off()
#plot(tree1,mar=0.1)
#text(tree1,use.n=T,cex=0.9)
plotcp(tree1)
tree1$cptable
cptable<-as.data.frame(tree1$cptable)
cptable_p<-cptable[cptable$CP<0.0005,]
cptable_p$labels<-as.character(cptable_p$nsplit)
a<-which.min(cptable_p$xerror)
x_se<-cptable_p$xerror[a]+cptable_p$xstd[a]
printcp(tree1)
